#!/usr/bin/python3

import sys
import copy
import signal
import argparse


def matmul(l1_11, l1_12, l1_21, l1_22, l2_11, l2_12, l2_21, l2_22):
    return l1_11*l2_11 + l1_12*l2_21, l1_11*l2_12 + l1_12*l2_22, l1_21*l2_11 + l1_22*l2_21, l1_21*l2_12 + l1_22*l2_22



def matsq(l1_11, l1_12, l1_21, l1_22):
    return l1_11*l1_11 + l1_12*l1_21, l1_11*l1_12 + l1_12*l1_22, l1_21*l1_11 + l1_22*l1_21, l1_21*l1_12 + l1_22*l1_22


def matpower(l_11, l_12, l_21, l_22, N: int):
    if N == 0:
        return 1, 0, 0, 1
    if N == 1:
        return l_11, l_12, l_21, l_22
    if (N & (N - 1)) == 0:
        while N > 1:
            print(N)
            l_11, l_12, l_21, l_22 = matsq(l_11, l_12, l_21, l_22)
            N //= 2
        return l_11, l_12, l_21, l_22
    b_11, b_12, b_21, b_22 = 1, 0, 0, 1
    n_11, n_12, n_21, n_22 = l_11, l_12, l_21, l_22
    while N > 1:
        print(N)
        if N % 2:
            b_11, b_12, b_21, b_22 = matmul(b_11, b_12, b_21, b_22, n_11, n_12, n_21, n_22)
        n_11, n_12, n_21, n_22 = matsq(n_11, n_12, n_21, n_22)
        N //= 2
    return matmul(b_11, b_12, b_21, b_22, n_11, n_12, n_21, n_22)


def main():
    parser = argparse.ArgumentParser(prog="Fibonacci(N)")
    parser.add_argument("N", type=int)
    parser.add_argument("-b", "--binary", action="store_true")
    parser.add_argument("-o", "--output", default=None)
    parser.add_argument("-p", "--prev", default=None)
    args = parser.parse_args()
    if args.N < 0:
        print("Error: negative N passed.", file=sys.stderr)
        sys.exit(1)
    sys.set_int_max_str_digits(0)
    if args.N == 0:
        i = 1
        j = 0
    else:
        j, _, i, _ = matpower(1, 1, 1, 0, args.N - 1)
    if args.binary:
        if args.output:
            with open(args.output, "wb") as f:
                f.write(j.to_bytes(length=(j.bit_length() + 7)//8, byteorder="big"))
        else:
            sys.stdout.buffer.write(j.to_bytes(length=(j.bit_length() + 7)//8, byteorder="big"))
        if args.prev:
            with open(args.prev, "wb") as f:
                f.write(i.to_bytes(length=(i.bit_length() + 7)//8, byteorder="big"))
    else:
        if args.output:
            with open(args.output, "w") as f:
                f.write(f"{j}\n")
        else:
            print(j)
        if args.prev:
            with open(args.prev, "w") as f:
                f.write(f"{i}\n")

if __name__ == "__main__":
    main()

